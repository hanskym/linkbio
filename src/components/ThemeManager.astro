---
type Props = {
  defaultTheme?: 'system' | 'dark' | 'light' | undefined;
};

const { defaultTheme = 'system' } = Astro.props;
---

<script is:inline data-default-theme={defaultTheme}>
  window.theme ??= (() => {
    const defaultTheme = document.currentScript.getAttribute('data-default-theme');
    const storageKey = 'theme';
    const store =
      typeof localStorage !== 'undefined'
        ? localStorage
        : { getItem: () => null, setItem: () => {} };

    const mediaMatcher = window.matchMedia('(prefers-color-scheme: light)');
    let systemTheme = mediaMatcher.matches ? 'light' : 'dark';
    mediaMatcher.addEventListener('change', (event) => {
      systemTheme = event.matches ? 'light' : 'dark';
      applyTheme(window.theme.getTheme());
    });

    function applyTheme(theme) {
      const resolvedTheme = theme === 'system' ? systemTheme : theme;

      document.documentElement.classList.remove('dark');

      if (resolvedTheme === 'dark') {
        document.documentElement.classList.add('dark');
      }

      document.documentElement.style.colorScheme = resolvedTheme;

      document.dispatchEvent(
        new CustomEvent('theme-changed', {
          detail: { theme, systemTheme, defaultTheme },
        }),
      );
    }

    function setTheme(theme = defaultTheme) {
      store.setItem(storageKey, theme);
      applyTheme(theme);
    }

    function getTheme() {
      return store.getItem(storageKey) || defaultTheme;
    }

    function getSystemTheme() {
      return systemTheme;
    }

    function getDefaultTheme() {
      return defaultTheme;
    }

    return { setTheme, getTheme, getSystemTheme, getDefaultTheme };
  })();
  window.theme.setTheme(window.theme.getTheme());
</script>
<script>
  document.addEventListener('astro:after-swap', () =>
    window.theme.setTheme(window.theme.getTheme()),
  );
</script>
